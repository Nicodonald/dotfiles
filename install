#!/bin/bash
INSTALLDIR=$HOME
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

if [ "$1" == "-h" ] || [ "$1" == "-?" ] || [ "$1" == "--help" ]; then
    echo "$0 <dotfiles install dir>"
    echo "Existing dotfiles will be moved to <filename>.old"
    echo "require vim, xclip, tmux, python pip"
    exit
fi

if [ "$1" == "auto" ] || [ "$1" == "-a" ] || [ "$1" == "--auto" ]; then
    AUTO=true
fi
if [ "$AUTO" == "true" ]; then
    use_powerline=Y
else
    echo -n "Do you want to use powerline ? [N/y]"
    read -n 1 use_powerline
fi

if [ "$use_powerline" == "Y" ] || [ "$use_powerline" == "y" ]; then
    if [ ! -d $HOME/repos ]; then
        mkdir -p $HOME/repos
    fi

    if [ ! -d $HOME/repos/powerline ]; then
        echo -e "\nCloning  powerline"
        git clone https://github.com/powerline/powerline.git $HOME/repos/powerline
    fi
    mkdir -p $HOME/.local/bin/
    if hash pip; then
     pip install --user --editable=$HOME/repos/powerline/ && ln -s $HOME/repos/powerline/scripts/powerline $HOME/.local/bin/
     pip install --user pytz
 else echo "python pip is not installed"
    fi
     if [ ! -d $HOME/.config/powerline ]; then
        mkdir -p $HOME/.config/
        ln -s $SCRIPTDIR/.config/powerline $INSTALLDIR/.config/ 2>/dev/null
    else 
        ln -s $SCRIPTDIR/.config/powerline $INSTALLDIR/.config/ 2>/dev/null
    fi


fi

if [ "$AUTO" == "true" ]; then
    use_bash_configs=Y
else
    echo -n "Do you want to use my bash configs? [N/y]"
    read -n 1 use_bash_configs
fi

if [ "$use_bash_configs" == "Y" ] || [ "$use_bash_configs" == "y" ]; then

 for i in .bash  .bash_logout  .bashrc  completion
 do
 	mv $INSTALLDIR/$i $INSTALLDIR/$i.old 2> /dev/null
 	ln -s $SCRIPTDIR/$i $INSTALLDIR/$i;
 done;
fi
echo

if [ "$AUTO" == "true" ]; then
    use_vim_configs=Y
else
    echo -n "Do you want to use my vim configs? [N/y]"
    read -n 1 use_vim_configs
fi

if [ "$use_vim_configs" == "Y" ] || [ "$use_vim_configs" == "y" ]; then
    mkdir -p $INSTALLDIR/vimundo 2> /dev/null
    mv $INSTALLDIR/.vim $INSTALLDIR/.vim.old
    mv $INSTALLDIR/.vimrc $INSTALLDIR/.vimrc.old
	ln -s $SCRIPTDIR/.vim $INSTALLDIR/.vim 2> /dev/null
	ln -s $SCRIPTDIR/.vimrc $INSTALLDIR/.vimrc 2> /dev/null
    if [ ! -d "$SCRIPTDIR/.vim/bundle/Vundle.vim" ]; then
     git clone https://github.com/VundleVim/Vundle.vim.git $SCRIPTDIR/.vim/bundle/Vundle.vim
    fi
    vim -c "PluginInstall" -c "qa!"
    ln -s $SCRIPTDIR/.config/nvim $INSTALLDIR/.config/ 2 > /dev/null
fi
echo

if [ ! "$AUTO" == "true" ]; then
 echo -en "\nDo you want to use my git configs? [N/y]"
 read -n 1 use_git_configs
 
 if [ "$use_git_configs" == "Y" ] || [ "$use_git_configs" == "y" ]; then
     echo -e "\nGit config settings"
     echo -n "Name: "
     read git_name
     echo -ne "\nEmail: "
     read git_email
 
     cp $SCRIPTDIR/.gitconfig $INSTALLDIR/.gitconfig
     sed -i "s/%%GITNAME%%/$git_name/" $INSTALLDIR/.gitconfig
     sed -i "s/%%GITEMAIL%%/$git_email/" $INSTALLDIR/.gitconfig
     git config --global diff.tool vimdiff
     git config --global difftool.prompt false
     git config --global alias.d difftool
 fi
fi

if [ ! -d $INSTALLDIR/.node-completion ]; then
	mkdir -p $INSTALLDIR/.node-completion
fi
echo

if [ ! "$AUTO" == "true" ]; then
 echo -en "\nDo you want to use my tmux configs? [N/y]"
 read -n 1 use_tmux_configs
 
 if [ "$use_tmux_configs" == "Y" ] || [ "$use_tmux_configs" == "y" ]; then
 #	mv $INSTALLDIR/.config $INSTALLDIR/.config.old 2> /dev/null
 	mv $INSTALLDIR/.tmux.conf $INSTALLDIR/.tmux.conf.old 2> /dev/null
     mkdir -p $HOME/.config/powerline 2> /dev/null
     ln -s $SCRIPTDIR/.config/powerline $INSTALLDIR/.config/powerline
     ln -s $SCRIPTDIR/.tmux.conf $INSTALLDIR/.tmux.conf
 fi
fi

echo

if [ ! "$AUTO" == "true" ]; then
 echo -en "\nDo you want to use my zsh configs? [N/y]"
 read -n 1 use_zsh_configs
 
 if [ "$use_zsh_configs" == "Y" ] || [ "$use_zsh_configs" == "y" ]; then
     mv $INSTALLDIR/.zshrc $INSTALLDIR/.zshrc.old 2> /dev/null
 	ln -s $SCRIPTDIR/.zshrc $INSTALLDIR/.zshrc 2> /dev/null
     git clone https://github.com/zsh-users/antigen.git $INSTALLDIR/antigen
 fi
fi
echo
#echo -e "\nInitializing submodules..."
#git submodule init && git submodule update
#
echo "Done. Conflicting existing dotfiles were moved to <file>.old"
